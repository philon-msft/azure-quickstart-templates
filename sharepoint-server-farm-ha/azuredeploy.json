{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "The name of the administrator account of the new VMs and Domain"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "The password for the administrator account of the new VMs and Domain"
      }
    },
    "storageAccountNamePrefix": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "The prefix of the new storage account created to store the VM disks. Different storage accounts will be created for AD, SQL, and SharePoint VMs."
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "Change this value to your repo name if deploying from a fork"
      },
      "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/sharepoint-server-farm-ha"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "Auto-generated token to access _artifactsLocation",
        "artifactsLocationSasToken": ""
      },
      "defaultValue": ""
    },
    "sqlServerServiceAccountUserName": {
      "type": "string",
      "metadata": {
        "group": "SQL Server settings",
        "description": "The SQL Server service account name"
      },
      "defaultValue": "sqlservice"
    },
    "sqlServerServiceAccountPassword": {
      "type": "securestring",
      "metadata": {
        "group": "SQL Server settings",
        "description": "The SQL Server Service account password"
      }
    },
    "spWebIPRGName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "Resource Group containing existing SP Web IP address"
      }
    },
    "spWebIPNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "Indicates whether the Sharepoint farm's IP is new or existing"
      }
    },
    "spWebIPAddressName": {
      "type": "string",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The new or existing - depending on value of spWebIPNewOrExisting parameter - IP address name for SP Web "
      }
    },
    "dnsPrefix": {
      "type": "string",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The DNS Prefix for the Public IP Address for the Sharepoint Web Application"
      }
    },
    "sharePointSetupUserAccountUserName": {
      "type": "string",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The Sharepoint Setup account name"
      },
      "defaultValue": "spsetup"
    },
    "sharePointSetupUserAccountPassword": {
      "type": "securestring",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The Sharepoint Setup account password"
      }
    },
    "sharePointFarmAccountUserName": {
      "type": "string",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The Sharepoint Farm account name"
      },
      "defaultValue": "sp_farm"
    },
    "sharePointFarmAccountPassword": {
      "type": "securestring",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The Sharepoint Farm account password"
      }
    },
    "sharePointFarmPassphrasePassword": {
      "type": "securestring",
      "metadata": {
        "group": "SharePoint Server settings",
        "description": "The Sharepoint Farm Passphrase"
      }
    }
  },
  "variables": {
    "spCADNSPrefix": "[concat(parameters('dnsPrefix'), 'admin')]",
    "spCAIPAddressName": "[concat(parameters('spWebIPAddressName'), 'admin')]",
    "lbSettings": {
      "rdpLBFE": "rdpLBFE",
      "sqlLBFE": "sqlLBFE",
      "spWebLBFE": "spWebLBFE",
      "spCALBFE": "spCALBFE",
      "adLBBE": "adLBBE",
      "sqlLBBE": "sqlLBBE",
      "spWebLBBE": "spWebLBBE",
      "spCALBBE": "spCALBBE",
      "spWebLB": "spWeb",
      "spCALB": "spCALB",
      "sqlLBName": "sqlLoadBalancer",
      "rdpLBName": "rdpLoadBalancer",
      "spWebLBName": "spWebLoadBalancer",
      "spCALBName": "spCALoadBalancer"
    },
    "subnetNames": {
      "static": "staticSubnet",
      "sql": "sqlSubnet",
      "spWeb": "spWebSubnet",
      "spApp": "spAppSubnet"
    },
    "RDPNAT": "RDP",
    "spCANAT": "spCANAT",
    "SQLAOProbe": "SQLAlwaysOnEndPointProbe",
    "spWebProbe": "spWebProbe",
    "vmSettings": {
      "availabilitySetNames": {
        "sql": "sqlAvailabilitySet",
        "ad": "adAvailabilitySet",
        "spWeb": "spWebAvailabilitySet",
        "spApp": "spAppAvailabilitySet"
      },
      "vmContainerName": "vhds",
      "adPDCVMName": "ad-pdc",
      "adBDCVMName": "ad-bdc",
      "sqlVMName": "sql-",
      "sqlwVMName": "sql-w",
      "spwebVMName": "sps-web-",
      "spappVMName": "sps-app-",
      "windowsImagePublisher": "MicrosoftWindowsServer",
      "windowsImageOffer": "WindowsServer",
      "windowsImageSKU": "2012-R2-Datacenter"
    },
    "prefix": "[tolower(trim(subString(concat(parameters('dnsPrefix'), '           '), 0, 10)))]",
    "sqlAOAGName": "[concat(variables('prefix'), '-ag')]",
    "sqlLBIPAddress": "10.0.0.6",
    "sharePath": "[concat(variables('prefix'), '-fsw')]",
    "adPdcNicName": "[concat(variables('vmSettings').adPDCVMName, '-nic')]",
    "adPdcNicIPAddress": "10.0.0.4",
    "domainName": "contoso.local",
    "adBdcNicName": "[concat(variables('vmSettings').adBDCVMName, '-nic')]",
    "adBdcNicIPAddress":"10.0.0.5",
    "sqlwNicName": "[concat(variables('vmSettings').sqlwVMName, '-nic')]",
    "virtualNetworkName": "spfarmhaVNET",
    "virtualNetworkAddressRange": "10.0.0.0/16",
    "staticSubnetRef": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')), '/subnets/', variables('subnetNames').static)]",
    "spWebResourceIdexisting": "[resourceId(parameters('spWebIPRGName'), concat('Microsoft.Network', '/', 'publicIPAddresses'), parameters('spWebIPAddressName'))]",
    "spWebResourceIdnew": "[resourceId(concat('Microsoft.Network', '/', 'publicIPAddresses'), parameters('spWebIPAddressName'))]",
    "sharepointCAfqdn": "[concat(variables('spCADNSPrefix'), '.', toLower(trim(replace(resourceGroup().location, ' ' , ''))), '.cloudapp.azure.com')]",
    "sharepointWebfqdn": "[concat(parameters('dnsPrefix'), '.', toLower(trim(replace(resourceGroup().location, ' ' , ''))), '.cloudapp.azure.com')]",
    "subnets": [
      {
        "name": "[variables('subnetNames').static]",
        "properties": {
          "addressPrefix": "10.0.0.0/24"
        }
      },
      {
        "name": "[variables('subnetNames').sql]",
        "properties": {
          "addressPrefix": "10.0.1.0/24"
        }
      },
      {
        "name": "[variables('subnetNames').spWeb]",
        "properties": {
          "addressPrefix": "10.0.2.0/24"
        }
      },
      {
        "name": "[variables('subnetNames').spApp]",
        "properties": {
          "addressPrefix": "10.0.3.0/24"
        }
      }
    ]
  },
  "resources": [
    {
      "name": "CreatingStorageAccounts",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/creatingStorageAccounts.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountNamePrefix": {
            "value": "[parameters('storageAccountNamePrefix')]"
          },
          "storageAccountType": {
            "value": "Premium_LRS"
          }
        }
      }
    },
    {
      "name": "SettingUpRdp",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/publicip-rdp.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "rdpIPAddressName": {
            "value": "rdpIP"
          },
          "rdpLBName": {
            "value": "[variables('lbSettings').rdpLBName]"
          },
          "rdpLBFE": {
            "value": "[variables('lbSettings').rdpLBFE]"
          },
          "adLBBE": {
            "value": "[variables('lbSettings').adLBBE]"
          },
          "RDPNAT": {
            "value": "[variables('RDPNAT')]"
          },
          "rdplbFEConfigID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').rdpLBName), '/frontendIPConfigurations/', variables('lbSettings').rdpLBFE)]"
          }
        }
      }
    },
    {
      "name": "SettingUpSharepointWebPublicIP",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/publicip-', parameters('spWebIPNewOrExisting'), '.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIPAddressName": {
            "value": "[parameters('spWebIPAddressName')]"
          },
          "publicIPAddressType": {
            "value": "dynamic"
          },
          "dnsPrefix": {
            "value": "[parameters('dnsPrefix')]"
          },
          "publicIpRGName": {
            "value": "[parameters('spWebIPRGName')]"
          }
        }
      }
    },
    {
      "name": "SettingUpSharepointCentralAdminPublicIP",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/publicip-new.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIPAddressName": {
            "value": "[variables('spCAIPAddressName')]"
          },
          "publicIPAddressType": {
            "value": "dynamic"
          },
          "dnsPrefix": {
            "value": "[variables('spCADNSPrefix')]"
          },
          "publicIpRGName": {
            "value": "[resourceGroup().name]"
          }
        }
      }
    },
    {
      "name": "CreatingAvailabilitySets",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/availabilitySets.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adAvailabilitySetName": {
            "value": "[variables('vmSettings').availabilitySetNames.ad]"
          },
          "sqlAvailabilitySetName": {
            "value": "[variables('vmSettings').availabilitySetNames.sql]"
          },
          "spWebAvailabilitySetName": {
            "value": "[variables('vmSettings').availabilitySetNames.spWeb]"
          },
          "spAppAvailabilitySetName": {
            "value": "[variables('vmSettings').availabilitySetNames.spApp]"
          }
        }
      }
    },
    {
      "name": "CreatingVirtualNetwork",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/vnet-new.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[variables('virtualNetworkAddressRange')]"
          },
          "subnets": {
            "value": "[variables('subnets')]"
          }
        }
      }
    },
    {
      "name": "SettingUpLoadBalancers",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/SettingUpSharepointCentralAdminPublicIP",
        "Microsoft.Resources/deployments/SettingUpSharepointWebPublicIP",
        "Microsoft.Resources/deployments/SettingUpRdp",
        "Microsoft.Resources/deployments/CreatingVirtualNetwork"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/setupLBs.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "spCALBName": {
            "value": "[variables('lbSettings').spCALBName]"
          },
          "spCALBFE": {
            "value": "[variables('lbSettings').spCALBFE]"
          },
          "spCAResourceId": {
            "value": "[resourceId('Microsoft.Network/publicIPAddresses', variables('spCAIPAddressName'))]"
          },
          "spCALBBE": {
            "value": "[variables('lbSettings').spCALBBE]"
          },
          "spCANAT": {
            "value": "[variables('spCANAT')]"
          },
          "spCAlbFEConfigID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').spCALBName), '/frontendIPConfigurations/', variables('lbSettings').spCALBFE)]"
          },
          "spWebLBName": {
            "value": "[variables('lbSettings').spWebLBName]"
          },
          "spWebLBFE": {
            "value": "[variables('lbSettings').spWebLBFE]"
          },
          "spWebResourceId": {
            "value": "[variables(concat('spWebResourceId', parameters('spWebIPNewOrExisting')))]"
          },
          "spWebLBBE": {
            "value": "[variables('lbSettings').spWebLBBE]"
          },
          "spWebLB": {
            "value": "[variables('lbSettings').spWebLB]"
          },
          "spWebLBFEConfigID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').spWebLBName), '/frontendIPConfigurations/', variables('lbSettings').spWebLBFE)]"
          },
          "spWebBEAddressPoolID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').spWebLBName), '/backendAddressPools/', variables('lbSettings').spWebLBBE)]"
          },
          "spWebProbeID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').spWebLBName), '/probes/', variables('spWebProbe'))]"
          },
          "spWebProbe": {
            "value": "[variables('spWebProbe')]"
          },
          "sqlLBName": {
            "value": "[variables('lbSettings').sqlLBName]"
          },
          "sqlLBFE": {
            "value": "[variables('lbSettings').sqlLBFE]"
          },
          "sqlLBIPAddress": {
            "value": "[variables('sqlLBIPAddress')]"
          },
          "staticSubnetRef": {
            "value": "[variables('staticSubnetRef')]"
          },
          "sqlLBBE": {
            "value": "[variables('lbSettings').sqlLBBE]"
          },
          "sqllbFEConfigID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').sqlLBName), '/frontendIPConfigurations/', variables('lbSettings').sqlLBFE)]"
          },
          "sqllbProbeID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').sqlLBName), '/probes/', variables('SQLAOProbe'))]"
          },
          "SQLAOProbe": {
            "value": "[variables('SQLAOProbe')]"
          }
        }
      }
    },
    {
      "name": "CreatingNetworkInterfaces",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingVirtualNetwork",
        "Microsoft.Resources/deployments/SettingUpRdp",
        "Microsoft.Resources/deployments/SettingUpLoadBalancers"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/creatingNICS.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adPdcNicName": {
            "value": "[variables('adPdcNicName')]"
          },
          "adPdcNicIPAddress": {
            "value": "[variables('adPdcNicIPAddress')]"
          },
          "staticSubnetRef": {
            "value": "[variables('staticSubnetRef')]"
          },
          "adBEAddressPoolID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').rdpLBName), '/backendAddressPools/', variables('lbSettings').adLBBE)]"
          },
          "adRDPNATRuleID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').rdpLBName), '/inboundNatRules/', variables('RDPNAT'))]"
          },
          "adBdcNicName": {
            "value": "[variables('adBdcNicName')]"
          },
          "adBdcNicIPAddress": {
            "value": "[variables('adBdcNicIPAddress')]"
          },
          "sqlVMName": {
            "value": "[variables('vmSettings').sqlVMName]"
          },
          "sqlSubnetRef": {
            "value": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')), '/subnets/', variables('subnetNames').sql)]"
          },
          "sqlBEAddressPoolID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').sqlLBName), '/backendAddressPools/', variables('lbSettings').sqlLBBE)]"
          },
          "spwebVMName": {
            "value": "[variables('vmSettings').spwebVMName]"
          },
          "spWebSubnetRef": {
            "value": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')), '/subnets/', variables('subnetNames').spWeb)]"
          },
          "spWebBEAddressPoolID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').spWebLBName), '/backendAddressPools/', variables('lbSettings').spWebLBBE)]"
          },
          "spappVMName": {
            "value": "[variables('vmSettings').spappVMName]"
          },
          "spAppSubnetRef": {
            "value": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')), '/subnets/', variables('subnetNames').spApp)]"
          },
          "spCABEAddressPoolID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').spCALBName), '/backendAddressPools/', variables('lbSettings').spCALBBE)]"
          },
          "spCANATRuleID": {
            "value": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbSettings').spCALBName), '/inboundNatRules/', variables('spCANAT'))]"
          },
          "sqlwNicName": {
            "value": "[variables('sqlwNicName')]"
          }
        }
      }
    },
    {
      "name": "ProvisioningPrimaryADDomainController",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingStorageAccounts",
        "Microsoft.Resources/deployments/CreatingNetworkInterfaces",
        "Microsoft.Resources/deployments/CreatingAvailabilitySets",
        "Microsoft.Resources/deployments/SettingUpRdp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/provisioningPrimaryDomainController.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adPDCVMName": {
            "value": "[variables('vmSettings').adPDCVMName]"
          },
          "storageAccountNamePrefix": {
            "value": "[parameters('storageAccountNamePrefix')]"
          },
          "availabilitySet": {
            "value": "[resourceId('Microsoft.Compute/availabilitySets', variables('vmSettings').availabilitySetNames.ad)]"
          },
          "adVMSize": {
            "value": "Standard_DS1"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "windowsImagePublisher": {
            "value": "[variables('vmSettings').windowsImagePublisher]"
          },
          "windowsImageOffer": {
            "value": "[variables('vmSettings').windowsImageOffer]"
          },
          "windowsImageSKU": {
            "value": "[variables('vmSettings').windowsImageSKU]"
          },
          "vmContainerName": {
            "value": "[variables('vmSettings').vmContainerName]"
          },
          "adPdcNicName": {
            "value": "[variables('adPdcNicName')]"
          },
          "domainName": {
            "value": "[variables('domainName')]"
          },
          "adPDCConfigurationFunction": {
            "value": "CreateADPDC.ps1\\CreateADPDC"
          },
          "adPDCModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'), '/dscv2/CreateADPDC.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          }
        }
      }
    },
    {
      "name": "UpdatingDNStoPrimaryADVM",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/ProvisioningPrimaryADDomainController"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/vnet-with-dns-server.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[variables('virtualNetworkAddressRange')]"
          },
          "subnets": {
            "value": "[variables('subnets')]"
          },
          "DNSServerAddress": {
            "value": [
              "[variables('adPdcNicIPAddress')]"
            ]
          }
        }
      }
    },
    {
      "name": "ProvisioningBackupADDomainController",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingStorageAccounts",
        "Microsoft.Resources/deployments/CreatingNetworkInterfaces",
        "Microsoft.Resources/deployments/CreatingAvailabilitySets"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/provisioningBackupDomainController.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adBDCVMName": {
            "value": "[variables('vmSettings').adBDCVMName]"
          },
          "storageAccountNamePrefix": {
            "value": "[parameters('storageAccountNamePrefix')]"
          },
          "availabilitySet": {
            "value": "[resourceId('Microsoft.Compute/availabilitySets', variables('vmSettings').availabilitySetNames.ad)]"
          },
          "adVMSize": {
            "value": "Standard_DS1"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "windowsImagePublisher": {
            "value": "[variables('vmSettings').windowsImagePublisher]"
          },
          "windowsImageOffer": {
            "value": "[variables('vmSettings').windowsImageOffer]"
          },
          "windowsImageSKU": {
            "value": "[variables('vmSettings').windowsImageSKU]"
          },
          "vmContainerName": {
            "value": "[variables('vmSettings').vmContainerName]"
          },
          "adBdcNicName": {
            "value": "[variables('adBdcNicName')]"
          },
          "DNSServer": {
            "value": "[variables('adPdcNicIPAddress')]"
          },
          "adBDCPreparationFunction": {
            "value": "PrepareADBDC.ps1\\PrepareADBDC"
          },
          "adBDCPreparationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'), '/dscv2/PrepareADBDC.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          }
        }
      }
    },
    {
      "name": "ConfiguringBackupADDomainController",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/ProvisioningBackupADDomainController",
        "Microsoft.Resources/deployments/UpdatingDNStoPrimaryADVM"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/configuringBackupDomainController.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adBDCVMName": {
            "value": "[variables('vmSettings').adBDCVMName]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "domainName": {
            "value": "[variables('domainName')]"
          },
          "adBDCConfigurationFunction": {
            "value": "ConfigureADBDC.ps1\\ConfigureADBDC"
          },
          "adBDCConfigurationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'), '/dscv2/ConfigureADBDC.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          }
        }
      }
    },
    {
      "name": "UpdatingDNSwithBackupADVM",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/ConfiguringBackupADDomainController"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/vnet-with-dns-server.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[variables('virtualNetworkAddressRange')]"
          },
          "subnets": {
            "value": "[variables('subnets')]"
          },
          "DNSServerAddress": {
            "value": [
              "[variables('adPdcNicIPAddress')]",
              "[variables('adBdcNicIPAddress')]"
            ]
          }
        }
      }
    },
    {
      "name": "ProvisioningSQLVirtualMachines",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingStorageAccounts",
        "Microsoft.Resources/deployments/CreatingNetworkInterfaces",
        "Microsoft.Resources/deployments/CreatingAvailabilitySets"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/provisioningSQLVMs.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "sqlVMName": {
            "value": "[variables('vmSettings').sqlVMName]"
          },
          "storageAccountNamePrefix": {
            "value": "[parameters('storageAccountNamePrefix')]"
          },
          "availabilitySet": {
            "value": "[resourceId('Microsoft.Compute/availabilitySets', variables('vmSettings').availabilitySetNames.sql)]"
          },
          "sqlVMSize": {
            "value": "Standard_DS3"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "windowsImagePublisher": {
            "value": "[variables('vmSettings').windowsImagePublisher]"
          },
          "windowsImageOffer": {
            "value": "[variables('vmSettings').windowsImageOffer]"
          },
          "windowsImageSKU": {
            "value": "[variables('vmSettings').windowsImageSKU]"
          },
          "vmContainerName": {
            "value": "[variables('vmSettings').vmContainerName]"
          },
          "sqlImagePublisher": {
            "value": "MicrosoftSQLServer"
          },
          "sqlImageOffer": {
            "value": "SQL2014SP1-WS2012R2"
          },
          "sqlImageSKU": {
            "value": "Enterprise"
          },
          "domainName": {
            "value": "[variables('domainName')]"
          },
          "sqlAOPrepareModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'), '/dscv2/PrepareAlwaysOnSqlServer.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "sqlAOPrepareFunction": {
            "value": "PrepareAlwaysOnSqlServer.ps1\\PrepareAlwaysOnSqlServer"
          },
          "prepareClusterModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'), '/dscv2/PrepareFailoverCluster.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "prepareClusterConfigurationFunction": {
            "value": "PrepareFailoverCluster.ps1\\PrepareFailoverCluster"
          },
          "sharePath": {
            "value": "[variables('sharePath')]"
          },
          "witnessVMSize": {
            "value": "Standard_DS1"
          },
          "sqlwVMName": {
            "value": "[variables('vmSettings').sqlwVMName]"
          },
          "sqlwNicName": {
            "value": "[variables('sqlwNicName')]"
          },
          "fswPreparationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'), '/dscv2/PrepareFileShareWitness.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "fswPreparationFunction": {
            "value": "PrepareFileShareWitness.ps1\\PrepareFileShareWitness"
          },
          "DNSServer": {
            "value": "[variables('adPdcNicIPAddress')]"
          }
        }
      }
    },
    {
      "name": "ConfiguringSQLAlwaysOnCluster",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/UpdatingDNSwithBackupADVM",
        "Microsoft.Resources/deployments/ProvisioningSQLVirtualMachines"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/configuringSQLAlwaysOnCluster.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "sqlVMName": {
            "value": "[variables('vmSettings').sqlVMName]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "domainName": {
            "value": "[variables('domainName')]"
          },
          "sqlAOConfigurationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'), '/dscv2/ConfigureAlwaysOnSqlServer.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "sqlAOConfigurationFunction": {
            "value": "ConfigureAlwaysOnSqlServer.ps1\\ConfigureAlwaysOnSqlServer"
          },
          "sqlAOEPName": {
            "value": "[concat(variables('prefix'), '-hadr')]"
          },
          "sqlServerServiceAccountUserName": {
            "value": "[parameters('sqlServerServiceAccountUserName')]"
          },
          "sharePointSetupUserAccountUserName": {
            "value": "[parameters('sharePointSetupUserAccountUserName')]"
          },
          "sqlServerServiceAccountPassword": {
            "value": "[parameters('sqlServerServiceAccountPassword')]"
          },
          "sharePointSetupUserAccountPassword": {
            "value": "[parameters('sharePointSetupUserAccountPassword')]"
          },
          "configureClusterModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'), '/dscv2/ConfigureFailoverCluster.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "configureClusterConfigurationFunction": {
            "value": "ConfigureFailoverCluster.ps1\\ConfigureFailoverCluster"
          },
          "clusterName": {
            "value": "[concat(variables('prefix'), '-fc')]"
          },
          "sharePath": {
            "value": "[variables('sharePath')]"
          },
          "sqlAOAGName": {
            "value": "[variables('sqlAOAGName')]"
          },
          "sqlAOListenerName": {
            "value": "[concat(variables('prefix'), 'ag-listener')]"
          },
          "sqlLBName": {
            "value": "[variables('lbSettings').sqlLBName]"
          },
          "sqlLBIPAddress": {
            "value": "[variables('sqlLBIPAddress')]"
          },
          "adPDCVMName": {
            "value": "[variables('vmSettings').adPDCVMName]"
          },
          "sqlwVMName": {
            "value": "[variables('vmSettings').sqlwVMName]"
          },
          "fswConfigurationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'), '/dscv2/ConfigureFileShareWitness.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "fswConfigurationFunction": {
            "value": "ConfigureFileShareWitness.ps1\\ConfigureFileShareWitness"
          }
        }
      }
    },
    {
      "name": "CreatingSharepointVirtualMachines",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingStorageAccounts",
        "Microsoft.Resources/deployments/CreatingNetworkInterfaces",
        "Microsoft.Resources/deployments/CreatingAvailabilitySets"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/provisioningSharepointVMs.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "spappVMName": {
            "value": "[variables('vmSettings').spappVMName]"
          },
          "spwebVMName": {
            "value": "[variables('vmSettings').spwebVMName]"
          },
          "spVMSize": {
            "value": "Standard_DS3"
          },
          "spWebAvailabilitySet": {
            "value": "[resourceId('Microsoft.Compute/availabilitySets', variables('vmSettings').availabilitySetNames.spWeb)]"
          },
          "spAppAvailabilitySet": {
            "value": "[resourceId('Microsoft.Compute/availabilitySets', variables('vmSettings').availabilitySetNames.spApp)]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "spImagePublisher": {
            "value": "MicrosoftSharePoint"
          },
          "spImageOffer": {
            "value": "MicrosoftSharePointServer"
          },
          "spImageSKU": {
            "value": "2016"
          },
          "vmContainerName": {
            "value": "[variables('vmSettings').vmContainerName]"
          },
          "storageAccountNamePrefix": {
            "value": "[parameters('storageAccountNamePrefix')]"
          },
          "spPreparationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'), '/dscv2/PrepareSharePointServerHA.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "spPreparationFunction": {
            "value": "PrepareSharePointServerHA.ps1\\PrepareSharePointServerHA"
          },
          "domainName": {
            "value": "[variables('domainName')]"
          },
          "DNSServer": {
            "value": "[variables('adPdcNicIPAddress')]"
          }
        }
      }
    },
    {
      "name": "ConfiguringSharepoint",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/ConfiguringSQLAlwaysOnCluster",
        "Microsoft.Resources/deployments/CreatingSharepointVirtualMachines"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/configuringSharePoint.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "spappVMName": {
            "value": "[variables('vmSettings').spappVMName]"
          },
          "sqlVMName": {
            "value": "[variables('vmSettings').sqlVMName]"
          },
          "spConfigurationModulesURL": {
            "value": "[concat(parameters('_artifactsLocation'), '/dscv2/ConfigureSharePointServerHA.ps1.zip', parameters('_artifactsLocationSasToken'))]"
          },
          "spConfigurationFunction": {
            "value": "ConfigureSharePointServerHA.ps1\\ConfigureSharePointServerHA"
          },
          "domainName": {
            "value": "[variables('domainName')]"
          },
          "adminUserName": {
            "value": "[parameters('adminUserName')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "sharePointSetupUserAccountUserName": {
            "value": "[parameters('sharePointSetupUserAccountUserName')]"
          },
          "sharePointFarmAccountUserName": {
            "value": "[parameters('sharePointFarmAccountUserName')]"
          },
          "sqlServerServiceAccountUserName": {
            "value": "[parameters('sqlServerServiceAccountUserName')]"
          },
          "sqlAOAGName": {
            "value": "[variables('sqlAOAGName')]"
          },
          "administrationContentDatabaseName": {
            "value": "SP_AdminContent"
          },
          "configDatabaseName": {
            "value": "SP_Config"
          },
          "contentDatabaseName": {
            "value": "spfarm_Content"
          },
          "sharepointCAfqdn": {
            "value": "[variables('sharepointCAfqdn')]"
          },
          "sharePointSetupUserAccountPassword": {
            "value": "[parameters('sharePointSetupUserAccountPassword')]"
          },
          "sharePointFarmAccountPassword": {
            "value": "[parameters('sharePointFarmAccountPassword')]"
          },
          "sharePointFarmPassphrasePassword": {
            "value": "[parameters('sharePointFarmPassphrasePassword')]"
          },
          "sqlServerServiceAccountPassword": {
            "value": "[parameters('sqlServerServiceAccountPassword')]"
          },
          "spwebVMName": {
            "value": "[variables('vmSettings').spwebVMName]"
          },
          "sharepointFarmName": {
            "value": "SharepointFarm"
          },
          "sharepointWebfqdn": {
            "value": "[variables('sharepointWebfqdn')]"
          },
          "spSiteTemplateName": {
            "value": "STS#0"
          }
        }
      }
    }
  ],
  "outputs": {
    "fqdn": {
      "value": "[variables('sharepointWebfqdn')]",
      "type": "string"
    },
    "cafqdn": {
      "value": "[variables('sharepointCAfqdn')]",
      "type": "string"
    }
  }
}
